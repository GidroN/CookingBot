from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from database.models import Category, Recipe, User, UserFavouriteRecipe, Report
from keyboards import cancel_mk, search_type_panel, categories, user_recipe_panel, RecipePaginationCallback, \
    AddRecipeToFavouritesCallback
from keyboards.button_text import ButtonText as BT
from keyboards.factories import ReportRecipeCallback
from misc.states import AddRecipeForm, SearchRecipeForm
from misc.utils import get_main_kb, send_user_recipe_info

router = Router(name='user_callbacks')


@router.message(F.text == BT.MAIN_MENU)
@router.message(Command('menu'))
async def menu(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    await state.clear()
    await message.answer('üè† –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=get_main_kb(tg_id))


@router.callback_query(AddRecipeForm.category, F.data.startswith('select_category_to_add_recipe_'))
async def choose_category_to_add_recipe(callback: CallbackQuery, state: FSMContext):
    category_id = callback.data.split('_')[-1]
    category = await Category.get(id=category_id)
    await callback.answer(f'–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category.title}')
    await state.update_data(category=category)
    await state.set_state(AddRecipeForm.recipe)
    await callback.message.answer(f'–û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>{category.title}</b>.\n'
                                  f'–¢–µ–ø–µ—Ä—å —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ (–ü—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ —Å–∫–æ–±–æ–∫ —Å–æ–±–ª—é–¥–∞—Ç—å!):\n'
                                  f'---------------------------------------------\n'
                                  f'1) –ù–∞–∑–≤–∞–Ω–∏–µ\n'
                                  f'2) –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é —Å —Ä–µ—Ü–µ–ø—Ç–æ–º –≤ https://telegra.ph \n'
                                  f'---------------------------------------------\n'
                                  f'–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —Ç–µ–ª–µ–≥—Ä–∞—Ñ - https://uchet-jkh.ru/i/telegraf-dlya-telegram-cto-eto-i-kak-ono-rabotaet/',
                                  reply_markup=cancel_mk)


@router.callback_query(SearchRecipeForm.category, F.data.startswith('select_category_to_search_recipe_'))
async def choose_category_to_search_recipe(callback: CallbackQuery, state: FSMContext):
    category_id = callback.data.split('_')[-1]

    if category_id.isdigit():
        category = await Category.get(id=category_id)
        await callback.answer(f'–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category.title}')
        await state.update_data(category=category)
        await callback.message.edit_text('–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫?')
        await callback.message.edit_reply_markup(reply_markup=search_type_panel)
        await state.set_state(SearchRecipeForm.search_type)
        return
    else:  # all
        result = await Recipe.all().order_by('date').prefetch_related('category', 'creator')
        await callback.answer('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ä–µ—Ü–µ–ø—Ç–∞–º.')
        await send_user_recipe_info(result, callback.message)
        await state.update_data(result=result)
        await state.set_state(SearchRecipeForm.result)


@router.callback_query(SearchRecipeForm.search_type, F.data == 'back_to_choose_category')
async def back_to_choose_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç:')
    await callback.message.edit_reply_markup(
        reply_markup=await categories('select_category_to_search_recipe_', show_all_recipes=True))
    await state.set_state(SearchRecipeForm.category)


@router.callback_query(SearchRecipeForm.search_type, F.data.startswith('choose_search_type_by_'))
async def choose_search_type(callback: CallbackQuery, state: FSMContext):
    search_type = callback.data.split('_')[-1]

    if search_type == 'name':
        await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.')
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞', reply_markup=cancel_mk)

    elif search_type == 'author':
        await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É')
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å', reply_markup=cancel_mk)

    else:
        # search_type = all
        category = (await state.get_data())['category']
        result = await Recipe.filter(category=category).prefetch_related('category', 'creator')
        await state.update_data(result=result)
        await callback.answer('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫ –ø–æ —Å–∞–º—ã–º –Ω–æ–≤—ã–º —Ä–µ—Ü–µ–ø—Ç–∞–º.')
        await send_user_recipe_info(result, callback.message, category)
        await state.set_state(SearchRecipeForm.result)
        return

    await state.set_state(SearchRecipeForm.get_user_input)
    await state.update_data(search_type=search_type)


@router.callback_query(SearchRecipeForm.result, RecipePaginationCallback.filter())
async def process_search_result(callback: CallbackQuery, callback_data: RecipePaginationCallback, state: FSMContext):
    result = (await state.get_data())['result']
    page = callback_data.page
    action = callback_data.action
    if action == 'prev':
        page -= 1
    if action == 'next':
        page += 1

    if page < 0:
        page = 0
        await callback.answer('–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç.')
    if page >= len(result):
        page = len(result) - 1
        await callback.answer('–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç.')

    await send_user_recipe_info(result, callback.message, page=page, print_find=False, edit_msg=True)


@router.callback_query(SearchRecipeForm.result, AddRecipeToFavouritesCallback.filter())
async def process_add_to_favourites(callback: CallbackQuery, callback_data: AddRecipeToFavouritesCallback, state: FSMContext):
    recipe_id = callback_data.recipe_id
    page = callback_data.page
    user = await User.get(tg_id=callback.message.chat.id).prefetch_related('favourite_recipes')
    favourite = await user.favourite_recipes.all()
    recipe = await Recipe.get(id=recipe_id)
    if recipe in favourite:
        await UserFavouriteRecipe.filter(recipe=recipe, user=user).delete()
        await callback.answer('–£–¥–∞–ª–µ–Ω –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö.')
        await callback.message.edit_reply_markup(reply_markup=user_recipe_panel(recipe.id, False, page))
    else:
        await UserFavouriteRecipe.create(recipe=recipe, user=user)
        await callback.answer('–î–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ.')
        await callback.message.edit_reply_markup(reply_markup=user_recipe_panel(recipe.id, True, page))


@router.callback_query(SearchRecipeForm.result, ReportRecipeCallback.filter())
async def process_user_recipe_report(callback: CallbackQuery, callback_data: ReportRecipeCallback, state: FSMContext):
    recipe_id = callback_data.recipe_id
    user_id = callback.message.chat.id

    recipe = await Recipe.get(id=recipe_id)
    user = await User.get(tg_id=user_id)

    if await Report.filter(recipe=recipe, user=user).exists():
        await callback.answer('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∂–∞–ª–æ–±—É —Ä–∞–Ω–µ–µ –Ω–∞ —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç.', show_alert=True)
    else:
        await Report.create(recipe=recipe, user=user)
        await callback.answer('–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!', show_alert=True)

        reports_quantity = await Report.filter(recipe=recipe).count()

        if reports_quantity == 3:
            # TODO: notify admins
            ...


