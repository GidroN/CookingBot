import random

from aiogram import F, Router
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from bot.database.models import Recipe, User
from bot.database.redis_client import rc
from bot.keyboards import cancel_mk, help_kb, profile_mk, search_type_panel, user_agreement_panel, \
    user_agree_agreement_kb, random_recipe_kb
from bot.keyboards.builders import categories, profile_panel
from bot.constants.button_text import ButtonText as BT
from bot.misc.filters import IsNotActiveUser
from bot.misc.states import (AddRecipeForm, RegisterUserForm, SearchRecipeForm,
                             SetTimerForm)
from bot.misc.utils import (cache_list_update, convert_ids_list_into_objects,
                            get_main_kb, send_single_recipe,
                            send_user_recipe_change, send_user_recipe_info)

router = Router(name='user_handlers')


@router.message(IsNotActiveUser())
@router.message(IsNotActiveUser(), F.text == BT.DEATH)
async def handle_not_active_user(message: Message):
    user = await User.get(tg_id=message.from_user.id)
    await message.answer(f'<b>–£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name}! </b>\n'
                         f'–í–∞—à –∞–∫–∫–∞–Ω—É—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∑–∞ —Ç—Ä–µ—Ö–∫—Ä–∞—Ç–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.\n',
                         reply_markup=help_kb)


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()

    user = message.from_user

    tg_id = user.id
    full_name = user.first_name

    if user.last_name:
        full_name += " " + user.last_name

    user = await User.get_or_none(tg_id=tg_id)
    if not user:
        await message.answer(f'<b>{full_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!</b>\n'
                             f'–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ '
                             f'–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.',
                             reply_markup=user_agreement_panel)
        await message.answer('–ù–ê–ñ–ò–ú–ê–Ø –ù–ê –ö–ù–û–ü–ö–£ –ù–ò–ñ–ï, –í–´ –°–û–ì–õ–ê–®–ê–ï–¢–ï–°–¨ –° –£–°–õ–û–í–ò–Ø–ú–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ë–û–¢–ê.',
                             reply_markup=user_agree_agreement_kb)
        await state.set_state(RegisterUserForm.agreement)
    else:
        await message.answer(f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, @{user.username}!', reply_markup=await get_main_kb(user.tg_id))


@router.message(F.text == BT.MAIN_MENU)
@router.message(Command('menu'))
async def menu(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    await state.clear()
    await message.answer('üè† –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await get_main_kb(tg_id))


@router.message(Command('help'))
async def help_command(message: Message):
    await message.answer('–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n'
                         '<b>/menu</b> - –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
                         '<b>/timer</b> - –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä\n'
                         '<b>/profile</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è\n'
                         '<b>/my_recipes</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤\n'
                         '<b>/fav_recipes</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤\n'
                         '<b>/search_recipe</b> - –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤\n'
                         '<b>/random_recipe</b> - –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç\n'
                         '<b>/fast_search *–≤–∞—à –∑–∞–ø—Ä–æ—Å*</b> - –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n'
                         '<b>/help - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.</b>')


@router.message(F.text == BT.TIMER)
@router.message(Command('timer'))
async def set_timer(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö:', reply_markup=cancel_mk)
    await state.set_state(SetTimerForm.minutes)


@router.message(F.text == BT.PROFILE)
@router.message(Command('profile'))
async def profile(message: Message):
    tg_id = message.from_user.id
    user = await User.get(tg_id=tg_id).prefetch_related('favourite_recipes')
    favourite_recipes = await user.favourite_recipes.all().count()
    published_recipes = await Recipe.filter(creator=user).count()
    await message.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.', reply_markup=profile_mk)
    await message.answer(f'üßë –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n'
                         f'üëÄ –ò–º—è: <b>{user.name}</b>\n'
                         f'üìö –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã: <b>{published_recipes}</b>\n'
                         f'‚ô• –õ—é–±–∏–º—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã: <b>{favourite_recipes}</b>',
                         reply_markup=await profile_panel(tg_id))


@router.message(F.text == BT.ADD_RECIPE)
@router.message(Command('add_recipe'))
async def add_recipe(message: Message, state: FSMContext):
    await state.set_state(AddRecipeForm.category)
    await message.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.', reply_markup=await get_main_kb(message.chat.id, True))
    await message.answer('–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ço—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:',
                         reply_markup=await categories('select_category_to_add_recipe_', prev=False))


@router.message(F.text == BT.FAVOURITE_RECIPES)
@router.message(Command('fav_recipes'))
async def favourite_recipes(message: Message):
    tg_id = str(message.from_user.id)
    user = await User.get(tg_id=tg_id).prefetch_related('favourite_recipes')
    ids = await user.favourite_recipes.filter(is_active=True).prefetch_related('category', 'creator').values_list('id', flat=True)

    if not ids:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤')
        return

    client = rc.get_client()
    cache_list_update(client, tg_id, ids)
    favourite_recipes = await convert_ids_list_into_objects(ids, Recipe, ['category', 'creator'])

    await message.answer(f'–£ –≤–∞—Å {len(favourite_recipes)} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.')
    await send_user_recipe_info(favourite_recipes, message, print_find=False)


@router.message(F.text == BT.MY_RECIPES)
@router.message(Command('my_recipes'))
async def user_recipes(message: Message):
    tg_id = str(message.from_user.id)
    client = rc.get_client()
    user = await User.get(tg_id=message.from_user.id)
    ids = await Recipe.filter(creator=user).values_list('id', flat=True)

    if not ids:
        await message.answer('–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –Ω–∞–ø–∏—à–∏—Ç–µ /add_recipe')
        return

    cache_list_update(client, tg_id, ids)
    created_recipes = await convert_ids_list_into_objects(ids, Recipe, ['category', 'creator'])

    await message.answer(f'–£ –≤–∞—Å {len(created_recipes)} —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.')
    await send_user_recipe_change(created_recipes, message)


@router.message(F.text == BT.SEARCH_RECIPES)
@router.message(Command('search_recipe'))
async def search_recipe(message: Message, state: FSMContext):
    await message.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –≤—ã–±–æ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞.', reply_markup=await get_main_kb(message.from_user.id, True))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞:', reply_markup=await search_type_panel())
    await state.set_state(SearchRecipeForm.search_type)


@router.message(F.text == BT.RANDOM_RECIPE)
@router.message(Command('random_recipe'))
async def random_recipe(message: Message):
    all_recipes = await Recipe.all().prefetch_related('creator', 'category')
    recipe = random.choice(all_recipes)
    await message.answer('–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç', reply_markup=random_recipe_kb)
    await send_single_recipe(recipe, message)


@router.message(Command('fast_search'))
async def fast_search(message: Message, command: CommandObject):
    prompt = command.args

    if not prompt:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n'
                             '–ü—Ä–∏–º–µ—Ä:\n'
                             '<b>/fast_search</b> –ü–µ–ª—å–º–µ–Ω–∏', reply_markup=await get_main_kb(message.from_user.id, True))
        return

    recipe = await Recipe.filter(title__icontains=prompt).first().prefetch_related('creator', 'category')
    if recipe:
        await send_single_recipe(recipe, message)
    else:
        await message.answer('–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', reply_markup=await get_main_kb(message.from_user.id, True))


@router.message()
async def handle_all_messages(message: Message):
    await message.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–Ω–µ —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞.')
